// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WrappedPayload {
    #[prost(int32, tag = "1")]
    pub version: i32,
    #[prost(enumeration = "wrapped_payload::Type", tag = "2")]
    pub r#type: i32,
    #[prost(bytes = "vec", tag = "3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
}
/// Nested message and enum types in `WrappedPayload`.
pub mod wrapped_payload {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Type {
        SmallL2Payload = 0,
        LargeL2Payload = 1,
        DataFromL2Tx = 2,
    }
    impl Type {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::SmallL2Payload => "SMALL_L2_PAYLOAD",
                Self::LargeL2Payload => "LARGE_L2_PAYLOAD",
                Self::DataFromL2Tx => "DATA_FROM_L2_TX",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SMALL_L2_PAYLOAD" => Some(Self::SmallL2Payload),
                "LARGE_L2_PAYLOAD" => Some(Self::LargeL2Payload),
                "DATA_FROM_L2_TX" => Some(Self::DataFromL2Tx),
                _ => None,
            }
        }
    }
}
